vim9script

import './myplug.vim'

# Don't try to be Vi compatible
# Enables Vim features, which are not compatible with Vi
set nocompatible

# FIXME: Triggers 'filetype.vim' to be executed twice according to vim-startuptime
# syntax on
# filetype plugin indent on

# Setup autoreload of config when it's saved
augroup config_reload
  au!
  au BufWritePost $MYVIMRC ++nested source <afile>
  au SourcePre $MYVIMRC ++nested lua package.loaded['aj.config'] = nil
  au SourcePost $MYVIMRC ++nested call LightlineReload()
  au BufWritePost *.lua ++nested source $MYVIMRC
augroup END

lua << EOF
local config = require('aj.config')

local function table2dict(tbl)
  if type(tbl) == type({}) then
    for key, value in pairs(tbl) do
      tbl[key] = table2dict(value)
    end
    tbl = vim.dict(tbl)
  end
  return tbl
end

local vimrc_folder = vim.eval([[fnamemodify(resolve(expand('<sfile>:p')), ':h')]])
vim.call('myplug.Begin', vimrc_folder)
for i, plugin in ipairs(config.plugins) do
  local opts = {}
  if type(plugin) == type({}) then
    opts = plugin
    plugin = plugin[1]
  end
  vim.call('plug#', plugin, table2dict(opts))
end
vim.call('myplug.End')

for name, value in pairs(config.options) do
  if type(value) == type(true) then
    if value == false then
      name = 'no' .. name
    end

    vim.command('set ' .. name)
  else
    vim.command('set ' .. name .. '=' .. value)
  end
end

for name, value in pairs(config.globals) do
  vim.g[name] = table2dict(value)
end

for mapper, mappings in pairs(config.mappings) do
  for keys, action in pairs(mappings) do
    vim.command(mapper .. ' ' .. keys .. ' ' .. action)
  end
end
EOF

autocmd FileType markdown setlocal nofoldenable

var custom_options = luaeval('vim.dict(require("aj.config").custom_options)')

# Detect support of 'true colors'
var has_guicolors = $COLORTERM == 'truecolor' && exists('+termguicolors') || has('gui_vimr') || exists('g:fvim_loaded')

# Make background transparent after color scheme is changed
if custom_options.transparent_background
  autocmd! Colorscheme * hi Normal guibg=NONE ctermbg=NONE
endif

if has_guicolors
  set termguicolors
endif

if has_key(custom_options, 'colorscheme')
  execute 'colorscheme ' .. custom_options.colorscheme
endif

# Reloads lightline after changes to config
def LightlineReload()
  lightline#init()
  lightline#colorscheme()
  lightline#update()
enddef

### Hide cursorline for inactive windows
au! WinEnter * setlocal cursorline
au! WinLeave * setlocal nocursorline

